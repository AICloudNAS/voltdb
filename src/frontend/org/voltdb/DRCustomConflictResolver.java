/* This file is part of VoltDB.
 * Copyright (C) 2008-2017 VoltDB Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with VoltDB.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.voltdb;

/**
 * This interface defines the contract of Custom DR conflict resolution, which is currently
 * restricted to just resolving timestamp mismatches.
 */
public interface DRCustomConflictResolver extends DRConflictResolver {

    /**
     * Indicates a binary log message from the remote cluster that is trying to update from an existing row that
     * a) cannot be found or has an unexpected timestamp, and/or
     * b) conflicts with a locally inserted or updated row on a unique index or altered primary key
     *
     * @param conflict The {@link UpdateConflict} to resolve
     */
    void resolveUpdateConflict(CustomUpdateConflict conflict);


    /**
     * A {@link Conflict} encapsulating the conflict or conflicts generated by a remotely updated
     * row. This interface allows the resolver to either accept the new row, reject the new row, or supply
     * a replacement row. Note that if the new row or a replacement row are selected, it is possible for a
     * subsequent constraint violation to be generated if the proposed row's unique constraints are present
     * in other rows of the local cluster.
     * The consumer must ensure that this update
     * conflict contains a given type of conflict before asking for information
     * about that conflict. For example: <pre><code>
     * CustomUpdateConflict conflict = ...
     * if (conflict.hasExpectedRowConflict()) &#123
     *     ConflictRow row = conflict.getExpectedRow();
     *     ...
     * &#125</code></pre>
     */
    public interface CustomUpdateConflict extends UpdateConflict {

        /**
         * If neither the existing row or new row are acceptable, this method provides a means for
         * providing a custom replacement row that will replace the existing row. Only one replacement
         * row will be allowed and if this method is invoked more than once for the same conflict, the
         * subsequent invocations will be ignored.
         * @return {@code true} if the replacement row was successfully created
         */
        public boolean createReplacementRow(Object[] values);

        /**
         * @return {@code true} if the selected resolution was to apply the replacement row supplied by
         * {@link #createReplacementRow()}
         * @throws IllegalStateException if the conflict has not yet been
         * resolved or if {@link #createReplacementRow()} as not invoked
         */
        public boolean useReplacementRow();
    }
}
